{"ast":null,"code":"import { formatTime } from './utils';\nimport { useTransactionObservation_UNSTABLE } from 'recoil';\n\nconst generateColors = (isDark = true) => {\n  const colors = {\n    error: 'color: ',\n    info: 'color: ',\n    previous: 'color: ',\n    base: 'color: '\n  };\n\n  if (isDark) {\n    colors.error += '#ef6e70';\n    colors.info += '#9bceff';\n    colors.previous += '#d4d4d4';\n    colors.base += '#fff';\n  } else {\n    colors.error += '#c41518';\n    colors.info += '#2d02cc';\n    colors.previous += '#444';\n    colors.base += '#000';\n  }\n\n  return colors;\n};\n\nconst setColors = () => {\n  const isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  return generateColors(isDark);\n};\n\nconst logAction = action => {\n  const colors = setColors();\n  console.groupCollapsed('%c%s  %s  %s', colors.base, formatTime(new Date()), 'Atom name', action.name);\n\n  if (action.persistence) {\n    console.log('%cValue of atom cannot be read', colors.error);\n    console.log('%cPlease add: %c`persistence_UNSTABLE: { type: \"log\" }` %cto see the values for atom object: ', colors.base, colors.info, colors.base, action.name);\n  } else {\n    console.log('%cAtom value %o', colors.base, action.atomValue);\n    console.log('%cPrevious atom value %o', colors.previous, action.previousAtomValue);\n  }\n\n  console.groupEnd();\n};\n\nexport function RecoilLogger() {\n  useTransactionObservation_UNSTABLE(e => {\n    e.modifiedAtoms.forEach(name => {\n      logAction({\n        name,\n        atomValue: e.atomValues.get(name),\n        previousAtomValue: e.previousAtomValues.get(name),\n        persistence: e.atomInfo.get(name).persistence_UNSTABLE.type === 'none'\n      });\n    });\n  });\n  return null;\n}\nexport default RecoilLogger;","map":{"version":3,"sources":["/home/hackerone/Documents/6thsem/reactjs_practice/MediCord/client/node_modules/recoil-logger/index.js"],"names":["formatTime","useTransactionObservation_UNSTABLE","generateColors","isDark","colors","error","info","previous","base","setColors","window","matchMedia","matches","logAction","action","console","groupCollapsed","Date","name","persistence","log","atomValue","previousAtomValue","groupEnd","RecoilLogger","e","modifiedAtoms","forEach","atomValues","get","previousAtomValues","atomInfo","persistence_UNSTABLE","type"],"mappings":"AAAA,SAASA,UAAT,QAA2B,SAA3B;AACA,SAASC,kCAAT,QAAmD,QAAnD;;AAEA,MAAMC,cAAc,GAAG,CAACC,MAAM,GAAG,IAAV,KAAmB;AACxC,QAAMC,MAAM,GAAG;AACbC,IAAAA,KAAK,EAAE,SADM;AAEbC,IAAAA,IAAI,EAAE,SAFO;AAGbC,IAAAA,QAAQ,EAAE,SAHG;AAIbC,IAAAA,IAAI,EAAE;AAJO,GAAf;;AAMA,MAAIL,MAAJ,EAAY;AACVC,IAAAA,MAAM,CAACC,KAAP,IAAgB,SAAhB;AACAD,IAAAA,MAAM,CAACE,IAAP,IAAe,SAAf;AACAF,IAAAA,MAAM,CAACG,QAAP,IAAmB,SAAnB;AACAH,IAAAA,MAAM,CAACI,IAAP,IAAe,MAAf;AACD,GALD,MAKO;AACLJ,IAAAA,MAAM,CAACC,KAAP,IAAgB,SAAhB;AACAD,IAAAA,MAAM,CAACE,IAAP,IAAe,SAAf;AACAF,IAAAA,MAAM,CAACG,QAAP,IAAmB,MAAnB;AACAH,IAAAA,MAAM,CAACI,IAAP,IAAe,MAAf;AACD;;AACD,SAAOJ,MAAP;AACD,CAnBD;;AAqBA,MAAMK,SAAS,GAAG,MAAM;AACtB,QAAMN,MAAM,GACVO,MAAM,CAACC,UAAP,IACAD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAFpD;AAIA,SAAOV,cAAc,CAACC,MAAD,CAArB;AACD,CAND;;AAQA,MAAMU,SAAS,GAAIC,MAAD,IAAY;AAC5B,QAAMV,MAAM,GAAGK,SAAS,EAAxB;AAEAM,EAAAA,OAAO,CAACC,cAAR,CACE,cADF,EAEEZ,MAAM,CAACI,IAFT,EAGER,UAAU,CAAC,IAAIiB,IAAJ,EAAD,CAHZ,EAIE,WAJF,EAKEH,MAAM,CAACI,IALT;;AAOA,MAAIJ,MAAM,CAACK,WAAX,EAAwB;AACtBJ,IAAAA,OAAO,CAACK,GAAR,CAAY,gCAAZ,EAA8ChB,MAAM,CAACC,KAArD;AACAU,IAAAA,OAAO,CAACK,GAAR,CACE,+FADF,EAEEhB,MAAM,CAACI,IAFT,EAGEJ,MAAM,CAACE,IAHT,EAIEF,MAAM,CAACI,IAJT,EAKEM,MAAM,CAACI,IALT;AAOD,GATD,MASO;AACLH,IAAAA,OAAO,CAACK,GAAR,CAAY,iBAAZ,EAA+BhB,MAAM,CAACI,IAAtC,EAA4CM,MAAM,CAACO,SAAnD;AACAN,IAAAA,OAAO,CAACK,GAAR,CACE,0BADF,EAEEhB,MAAM,CAACG,QAFT,EAGEO,MAAM,CAACQ,iBAHT;AAKD;;AACDP,EAAAA,OAAO,CAACQ,QAAR;AACD,CA5BD;;AA8BA,OAAO,SAASC,YAAT,GAAwB;AAC7BvB,EAAAA,kCAAkC,CAAEwB,CAAD,IAAO;AACxCA,IAAAA,CAAC,CAACC,aAAF,CAAgBC,OAAhB,CAAyBT,IAAD,IAAU;AAChCL,MAAAA,SAAS,CAAC;AACRK,QAAAA,IADQ;AAERG,QAAAA,SAAS,EAAEI,CAAC,CAACG,UAAF,CAAaC,GAAb,CAAiBX,IAAjB,CAFH;AAGRI,QAAAA,iBAAiB,EAAEG,CAAC,CAACK,kBAAF,CAAqBD,GAArB,CAAyBX,IAAzB,CAHX;AAIRC,QAAAA,WAAW,EAAEM,CAAC,CAACM,QAAF,CAAWF,GAAX,CAAeX,IAAf,EAAqBc,oBAArB,CAA0CC,IAA1C,KAAmD;AAJxD,OAAD,CAAT;AAMD,KAPD;AAQD,GATiC,CAAlC;AAUA,SAAO,IAAP;AACD;AAED,eAAeT,YAAf","sourcesContent":["import { formatTime } from './utils'\nimport { useTransactionObservation_UNSTABLE } from 'recoil'\n\nconst generateColors = (isDark = true) => {\n  const colors = {\n    error: 'color: ',\n    info: 'color: ',\n    previous: 'color: ',\n    base: 'color: ',\n  }\n  if (isDark) {\n    colors.error += '#ef6e70'\n    colors.info += '#9bceff'\n    colors.previous += '#d4d4d4'\n    colors.base += '#fff'\n  } else {\n    colors.error += '#c41518'\n    colors.info += '#2d02cc'\n    colors.previous += '#444'\n    colors.base += '#000'\n  }\n  return colors\n}\n\nconst setColors = () => {\n  const isDark =\n    window.matchMedia &&\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n\n  return generateColors(isDark)\n}\n\nconst logAction = (action) => {\n  const colors = setColors()\n\n  console.groupCollapsed(\n    '%c%s  %s  %s',\n    colors.base,\n    formatTime(new Date()),\n    'Atom name',\n    action.name,\n  )\n  if (action.persistence) {\n    console.log('%cValue of atom cannot be read', colors.error)\n    console.log(\n      '%cPlease add: %c`persistence_UNSTABLE: { type: \"log\" }` %cto see the values for atom object: ',\n      colors.base,\n      colors.info,\n      colors.base,\n      action.name,\n    )\n  } else {\n    console.log('%cAtom value %o', colors.base, action.atomValue)\n    console.log(\n      '%cPrevious atom value %o',\n      colors.previous,\n      action.previousAtomValue,\n    )\n  }\n  console.groupEnd()\n}\n\nexport function RecoilLogger() {\n  useTransactionObservation_UNSTABLE((e) => {\n    e.modifiedAtoms.forEach((name) => {\n      logAction({\n        name,\n        atomValue: e.atomValues.get(name),\n        previousAtomValue: e.previousAtomValues.get(name),\n        persistence: e.atomInfo.get(name).persistence_UNSTABLE.type === 'none',\n      })\n    })\n  })\n  return null\n}\n\nexport default RecoilLogger\n"]},"metadata":{},"sourceType":"module"}